# -*- coding: utf-8 -*-
"""Disease Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RQ5YuXDFOuHKO571WLZORS-Bw_tzKexX
"""

!#pip install tensorflow keras matplotlib scikit-learn
!pip install tensorflow

import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import matplotlib.pyplot as plt
import numpy as np
import os

from google.colab import drive
drive.mount('/content/drive')

base_dir = '/content/drive/MyDrive/Disease detection'

datagen = ImageDataGenerator(rescale=1./255, validation_split=0.2)

train_gen = datagen.flow_from_directory(base_dir,
                                        target_size=(150, 150),
                                        batch_size=32,
                                        class_mode='binary',
                                        subset='training')

val_gen = datagen.flow_from_directory(base_dir,
                                      target_size=(150, 150),
                                      batch_size=32,
                                      class_mode='binary',
                                      subset='validation')

model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(32, (3, 3), activation='relu', input_shape=(150, 150, 3)),
    tf.keras.layers.MaxPooling2D(2, 2),
    tf.keras.layers.Conv2D(64, (3, 3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2, 2),
    tf.keras.layers.Conv2D(128, (3, 3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2, 2),
    tf.keras.layers.Conv2D(128, (3, 3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2, 2),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dropout(0.5),
    tf.keras.layers.Dense(512, activation='relu'),
    tf.keras.layers.Dense(1, activation='sigmoid')
])

model.compile(loss='binary_crossentropy',
              optimizer=tf.keras.optimizers.Adam(),
              metrics=['accuracy'])

history = model.fit(train_gen,
                    steps_per_epoch=train_gen.samples // train_gen.batch_size,
                    validation_data=val_gen,
                    validation_steps=val_gen.samples // val_gen.batch_size,
                    epochs=11)

acc = history.history['accuracy']
val_acc = history.history['val_accuracy']
loss = history.history['loss']
val_loss = history.history['val_loss']

epochs = range(len(acc))

plt.plot(epochs, acc, 'r', label='Training accuracy')
plt.plot(epochs, val_acc, 'b', label='Validation accuracy')
plt.title('Training and validation accuracy')
plt.legend()

plt.figure()

plt.plot(epochs, loss, 'r', label='Training loss')
plt.plot(epochs, val_loss, 'b', label='Validation loss')
plt.title('Training and validation loss')
plt.legend()

plt.show()

loss, accuracy = model.evaluate(val_gen)
print(f'Validation accuracy: {accuracy * 100:.2f}%')

model.save('my_model.keras')

from keras.models import load_model
model = load_model('my_model.keras')

#from tensorflow.keras.preprocessing import image
from tensorflow.keras.preprocessing import image


def predict_image(img_path):
    img = image.load_img(img_path, target_size=(150, 150))
    img_array = image.img_to_array(img) / 255.0
    img_array = np.expand_dims(img_array, axis=0)
    prediction = model.predict(img_array)
    return 'Tomato Mosaic Virus' if prediction[0] > 0.5 else 'Healthy'

img_path = '/content/drive/MyDrive/Disease detection/Tomato___healthy/tomato.JPG'
result = predict_image(img_path)
print(f'The plant is: {result}')

!pip install gunicorn

!pip install flask pyngrok

!ngrok authtoken 2gfblVBkGmmAG2R4mqDQwBIyo6V_oJgQXHrK4yFv8BEFCSUo

!pip install streamlit

import streamlit as st
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image
import numpy as np

# Load your pre-trained model
model = load_model('my_model.keras')
class_names = ['Healthy', 'Tomato Mosaic Virus']

# Define a function to preprocess the input image
def preprocess_image(img):
    img = img.resize((150, 150))
    img_array = image.img_to_array(img) / 255.0
    img_array = np.expand_dims(img_array, axis=0)
    return img_array

# Define the prediction function
def predict(image):
    img = image.load_img(image, target_size=(150, 150))
    img_array = preprocess_image(img)
    prediction = model.predict(img_array)
    result = class_names[int(np.round(prediction)[0])]
    return result

# Streamlit UI
st.title('Tomato Disease Detection')
uploaded_file = st.file_uploader("Upload an image of a tomato", type=["jpg", "jpeg", "png"])
if uploaded_file is not None:
    st.image(uploaded_file, caption='Uploaded Image', use_column_width=True)
    prediction = predict(uploaded_file)
    st.write(f"Prediction: {prediction}")

!streamlit run /usr/local/lib/python3.10/dist-packages/colab_kernel_launcher.py